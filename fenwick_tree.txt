//class implementation
class FenwickTree {
private:
	vi ft;
public:
	FenwickTree(int n) {
		ft.assign(n + 1, 0);//diff in assign and resize
	}
	int rsq(int a) {
		int sum = 0;
		while (a > 0) {
			sum += ft[a];
			a -= a&(-a);
		}
		return sum;
	}
	int rsq(int i, int j) {
		return rsq(j) - (i==1?0:rsq(i - 1));
	}
	void update(int i, int val) {
		while (i < (int)ft.size()) {
			ft[i] += val;
			i += (i&(-i));
		}
	}
	void display() {
		for (int i = 0; i < ft.size(); i++)
			cout << " " << ft[i];
	}
};

//simple one
vi ft;
void init_ft(int n) {
	ft.assign(n + 1, 0);
}
int sum(int i) {
	int sum = 0;
	while (i > 0) {
		sum += ft[i];
		i -= i&(-i);
	}
	return sum;
}
int rsq(int i, int j) {
	return sum(j) - (i == 1)?0:(sum(i-1));
}
void update(int i, int val) {
	int sz = ft.size();
	while (i < sz) {
		ft[i] += val;
		i += i&(-i);
	}
}