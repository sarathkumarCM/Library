#define _CRT_SECURE_NO_DEPRECATE
#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<algorithm>
#include<assert.h>
#include<string>
#include<string.h>
#include<set>
#include<sstream>
#include<locale>
#include<bitset>
#include<stack>
#include<map>
#include<queue>
#include<functional>
#include<math.h>
#include<unordered_set>
#include<unordered_map>

using namespace std;
#define MAX 1000000000+7
#define SMX 100000+7
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define TMAX 1e8+7
#define endl "\n"

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<long long> vl;


//void make_sieve(vector<bool> &sieve) { for (int p = 2; p*p < 1000001; p++)if (sieve[p])for (int i = p*p; i <= 1000001; i += p)sieve[i] = false; }
bool gt(string a, string b) {
	if (a.length() > b.length())
		return true;
	else if (a.length() < b.length())
		return false;
	else
		return a > b;
}
string minas(string bg, string sml) {
	string str = "";
	int n1 = bg.length();
	int n2 = sml.length();
	int diff = n1 - n2;
	int carry = 0;
	for (int i = n2 - 1; i >= 0; i--) {
		int sub =((bg[i + diff] - '0') - (sml[i] - '0') - carry);
		if (sub < 0) {
			sub += 10;
			carry = 1;
		}
		else
			carry = 0;
		if (i == 0 && sub == 0 && diff == 0)
			continue;
		str.push_back(sub + '0');
	}
	for (int i = n1 - n2 - 1; i >= 0; i--) {
		if (bg[i] == '0'&& carry) {
			str.push_back('9');
			continue;
		}
		int sub = ((bg[i] - '0') - carry);
		if (i > 0 || sub > 0)
			str.push_back(sub + '0');
		carry = 0;
	}
	reverse(str.begin(), str.end());
	return str;
}

string modul(string a, string b) {
	while (a[0] != 0) {
		if (a == b) {
			return "0";
		}
		else if (gt(a,b)) {
			a = minas(a, b);
		}
		else
			return a;
	}
	return a;
}
string gcd(string a, string b) {
	if (b[0] == '0')
		return a;
	a = modul(a, b);
	return gcd(b, a);
}
string addin(string a, string b) {
	if (a.length() > b.length())
		swap(a, b);
	string str = "";
	int n1 = a.length();
	int n2 = b.length();
	int carry = 0;
	int diff = n2 - n1;
	for (int i = n1 - 1; i >= 0; i--)
	{
		int sum = ((a[i] - '0') +
			(b[i + diff] - '0') +
			carry);
		str.push_back(sum % 10 + '0');
		carry = sum / 10;
	}

	for (int i = n2 - n1 - 1; i >= 0; i--)
	{
		int sum = ((b[i] - '0') + carry);
		str.push_back(sum % 10 + '0');
		carry = sum / 10;
	}

	if (carry)
		str.push_back(carry + '0');

	reverse(str.begin(), str.end());

	return str;
}
string divi(string a, string b) {
	string ans = "0";
	while (a[0] != '0'&&a.size()!=0) {
		a = minas(a, b);
		ans=addin(ans, "1");
		
	}
	return ans;
}

bool cmp(string a, string b) {
	if (a.length() == b.length())
		return a < b;
	else
		return a.length() < b.length();
}


int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
#ifdef SARATH
	assert(freopen("f://programming//test/temp.in", "r", stdin));
	assert(freopen("f://programming//test/temp.out", "w", stdout));
#endif // SARATH

	//#ifdef _DEBUG
	//	int tt = clock();
	//#endif
	//	
	//
	//#ifdef _DEBUG
	//	cerr << "TIME = " << ((float)(clock() - tt)/CLOCKS_PER_SEC) <<" Seconds"<< endl;
	//	tt = clock();
	//#endif
	int t;
	cin >> t;
	int tcc = 1;
	while (t--) {
		string n;
		int l;
		string str;
		vector<string> inp,ans;
		cin >> n >> l;
		string tip1,tip2;
		unordered_set<string> iip;

		cin >> tip1;
		cin >> tip2;
		inp.push_back(tip1);
		iip.insert(tip1);
		inp.push_back(tip2);
		iip.insert(tip2);
		string gc;
		if (gt(tip1, tip2)) {
			gc = gcd(tip1, tip2);
		}
		else {
			gc = gcd(tip2, tip1);
		}
		string ta = divi(tip1, gc);
		ans.push_back(ta);
		ans.push_back(gc);
		ans.push_back(divi(tip2, ans[1]));
		unordered_set<string> sta;
		int j = 2;
		for (; j < l; j++) {
			cin >> tip1;
			inp.push_back(tip1);
			if (sta.size() < 26) {
				string ttt = divi(tip1, ans[j]);
				ans.push_back(ttt);
				sta.insert(ttt);
			}

		}
		vector<string> aa = ans;
		unordered_set<string> ttans;
		for (int i = 0; i < (l + 1); i++)
			ttans.insert(ans[i]);
		vector<string> ttre;
		for (string s : ttans) {
			ttre.push_back(s);
		}
		/*for (string ss : sta) {
			ttre.push_back(ss);
		}*/
		sort(ttre.begin(), ttre.end(),cmp);
		unordered_map<string, int> mp;
		int cnt = 1;
		int sz = ttre.size();
		for (int i = 0; i < sz; i++) {
			if (mp[ttre[i]] == 0) {
				mp[ttre[i]] = cnt++;
			}
		}
		string res = "";
		int tas = aa.size();
		for (int i = 0; i < tas; i++) {
			res = res + (char)(mp[aa[i]] + 64);
		}
		cout << "Case #" << tcc << ": " << res << endl;
		tcc++;
	}

}