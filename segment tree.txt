typedef vector<int> vi;

#define RANGE_MIN 0
#define RANGE_MAX 1
#define RANGE_SUM 2
vi segment_tree;
void init_segment_tree(int N) { segment_tree.resize((int)2 * pow(2.0, floor(log((double)N) / log(2.0)) + 1),0);}
void build_segment_tree(int code, int A[],int node, int b,int e) {
	if (b == e) {
		if (code == RANGE_SUM) segment_tree[node] = A[b];
		else segment_tree[node] = b;
	}
	else
	{
		int leftIndx = 2 * node, rightIndx = 2 * node + 1;
		build_segment_tree(code, A, leftIndx, b, (b + e) / 2);
		build_segment_tree(code, A, rightIndx, (b + e) / 2 + 1, e);
		int lContent = segment_tree[leftIndx], rContent = segment_tree[rightIndx];
		if (code == RANGE_SUM)
			segment_tree[node] = lContent + rContent;
		else {
			int lValue = A[lContent], rValue = A[rContent];
			if (code == RANGE_MIN) segment_tree[node] = (lValue <= rValue) ? lContent : rContent;
			else segment_tree[node] = (rValue <= lValue) ? lContent : rContent;
		}
	}
}
int query(int code, int A[], int node, int b, int e, int i, int j) {
	if (i > e || j < b) return -1;
	if (b >= i&&e <= j) return segment_tree[node];
	int p1 = query(code, A, 2 * node, b, (b + e) / 2, i, j);
	int p2 = query(code, A, 2 * node + 1, (b + e) / 2 + 1, e, i, j);
	if (p1 == -1) return p2;
	if (p2 == -1) return p1;
	
	if (code == RANGE_SUM) return p1 + p2;
	else if (code == RANGE_MIN) return(A[p1] < A[p2] ? p1 : p2);
	else return (A[p1] < A[p2] ? p2 : p1);
}
void update(int code, int A[],int node, int newVal, int newIndx, int b, int e) {
	if (newIndx == b&&newIndx == e) {
		A[b] = newVal;
		if (code == RANGE_SUM)
			segment_tree[node] = newVal;
	}
	else {
		if (newIndx < ((b + e) / 2)) {
			update(code, A,node*2, newVal, newIndx, b, (b + e) / 2);
		}
		else {
			update(code, A, node * 2 + 1, newVal, newIndx, (b + e) / 2 + 1, e);
		}
		if (code == RANGE_SUM)
			segment_tree[node] = segment_tree[node * 2] + segment_tree[node * 2 + 1];
		else if (code == RANGE_MIN) segment_tree[node] = (segment_tree[node * 2] < segment_tree[node * 2 + 1]) ? segment_tree[node * 2] : segment_tree[node * 2 + 1];
		else  segment_tree[node] = (segment_tree[node * 2] > segment_tree[node * 2 + 1]) ? segment_tree[node * 2] : segment_tree[node * 2 + 1];
	}

}